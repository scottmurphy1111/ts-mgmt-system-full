generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL") // PROD
  // url               = env("DEV_DATABASE_URL") // DEV
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Producer {
  id                  String         @id @default(uuid())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  name                String
  dba                 String?
  taxId               String?
  website             String?
  type                String
  address             String
  city                String
  state               String
  zip                 String
  country             String         @default("USA")
  primaryContactName  String
  primaryContactPhone String
  primaryContactEmail String
  primaryContactTitle String?
  tsSalesRepId        String
  locations           TsLocation[]
  status              ProducerStatus @default(STARTED)
}

enum ProducerStatus {
  STARTED
  PENDING
  ACTIVE
  INACTIVE
}

model TsLocation {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String
  phone            String
  email            String
  website          String?
  address          String
  city             String
  state            String
  zip              String
  country          String            @default("USA")
  mailingAddress   String?
  mailingCity      String?
  mailingState     String?
  mailingZip       String?
  mailingCountry   String?           @default("USA")
  tsSalesRepId     String
  producerId       String?
  producer         Producer?         @relation(fields: [producerId], references: [id], onDelete: SetNull)
  locationPrograms LocationProgram[]
  locationContacts LocationContact[]
  locationNotes    LocationNote[]
  main             Boolean           @default(false)

  @@index([producerId])
  @@index([name])
  @@index([tsSalesRepId])
}

model LocationProgram {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  locationMarkups LocationMarkup[]
  locationId      String
  location        TsLocation       @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId])
}

model LocationMarkup {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  termValue         String
  markupValue       String
  locationProgramId String
  locationProgram   LocationProgram @relation(fields: [locationProgramId], references: [id], onDelete: Cascade)

  @@index([locationProgramId])
}

model LocationNote {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  note       String     @db.LongText
  locationId String
  location   TsLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId])
}

model LocationContact {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  email      String
  firstName  String
  lastName   String
  phone      String?
  role       String
  title      String?
  locationId String
  location   TsLocation? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([email, locationId])
  @@index([locationId])
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String
  phone     String
  address   String
  city      String
  state     String
  zip       String
  country   String   @default("USA")
}
